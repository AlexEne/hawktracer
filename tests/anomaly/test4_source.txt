# This file contains information about the expected call tree that CallGraph should build for
# a specific sequence of events.
#
#
# Each block is being proceded by the the number of lines it contains.
#
#
# First block describes the expected node data. Each node has
# ID - unique id
# LABEL - event's label
# CNT_CALLS - number of times this node is called if it's root
# LAST_START_TS - the start time of the last call
# LAST_STOP_TS - the end time of the last call
# TOTAL_DUR - sum of durations of all calls 
# TOTAL_CHILDREN_DUR - total duration of its children
#
#
# Second block describes the edges between these nodes. They need to form a tree
# ID - unique id of the node being described
# PARENT_ID - unique id of the parent of the node
# CNT_CHILDREN - number of children 
# (CHILD_ID, CNT_CALLS) - sequence of pairs describing the children; they need to be in 
#                         the order you expect CallGraph to build (increasing order by
#                         their first start time)
#       CHILD_ID - unique id of the child
#       CNT_CALLS - total number of times it is being called by parent
#
#
# Third block describes the sequence of events that you are passing to CallGraph.make()
# LABEL - event's label
# START_TS - start event time
# DURATION - event's duration
   
6
#ID   LABEL   CNT_CALLS   LAST_START_TS   LAST_STOP_TS   TOTAL_DUR   TOTAL_CHILDREN_DUR
1         F           1               0            100         100                   70 
2         D           0              10             50          40                   20
3         E           0              60             90          30                    0
4         A           0              20             30          10                    0
5         C           0              40             50          10                    2
6         B           0              45             47           2                    0
   
6
#ID   PARENT_ID   CNT_CHILDREN   (CHILD_ID, CNT_CALLS)
1             0              2    2 1    3 1
2             1              2    4 1    5 1
3             1              0    
4             2              0 
5             2              1    6 1
6             5              0
